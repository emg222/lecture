0.  How much time did you spend on this pre-class exercise, and when?

    I started this assignment at 9PM.

1.  What are one or two points that you found least clear in the
    9/22 slide decks (including the narration)?

    I don't fully understand how using split stream RNGs would work
    to generate random numbers between separate threads. Everything
    else seemed pretty clear.

2.  The pthread_mc.c file in the demo subdirectory runs a Monte Carlo
    simulation to estimate the expected value of a uniform random
    variable.  The "-p" option sets the number of processors used,
    while "-b" sets the number of trials between synchronizations.

    a) Write a model for the run time for this simulation code in
       terms of the number of trials (N), number of processors (p),
       time per trial (t_trial), and time to update the global
       counters in the critical section (t_update).

       Time for locked code:     N / B * t_update
       Time for parallel trials: N / P * t_trial

       Total time: N / B * t_update + N / P * t_trial
       
       However, in reality, t_update is a function of P.

    b) Run the code with a few different parameter values in order
       to estimate N, t_trial, and t_update for this code on
       a totient compute node.

       I ran it a few times on my local machine:
       p = 1;  b = 2. Total Time = 2.6354e-2 s, N = 1000002
       p = 1;  b = 4. Total Time = 1.5405e-2 s, N = 1000004
       p = 8;  b = 8. Total Time = 4.7311e-2 s, N = 1000064
       p = 16; b = 8. Total Time = 4.9454e-2 s, N = 1000128.

       N is a function of the tolerance. We can set the tolerance to
       be low so that we essentially do the max number of trials every
       time.

       We get an approximate N = 1000000 + p * b.
       We can use Matlab to do a least squares solve for t_trial
       and t_update.


    c) Based on your model, suggest a strategy for choosing the batch
       size.  How might you generalize this strategy to automatically
       choose batch sizes for different types of computational
       experiments?

       We can take the partial derivitive wrt to b and find a zero.
       Given that we get p as an input parameter, we can generalize
       this by see what happens as to the time we increase b or
       decrease b a little bit. We then can move in that direction
       until we find a b that minimizes the computational time.
    
3.  In the workq subdirectory of this directory, there is a basic work
    queue implementation.  Following the strategy outlined in the
    slides, add synchronization calls in the locations marked TODO.
    You should run the code to make sure it behaves as expected!
